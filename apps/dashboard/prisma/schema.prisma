// Task Master Dashboard - Prisma Schema
// Database schema for multi-project task management system

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// JSON types will be handled as Prisma.JsonValue

// Core User model for authentication and authorization
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  password      String?   // Password for credentials-based auth
  image         String?
  
  // Profile fields
  username      String?   @unique
  bio           String?
  location      String?
  timezone      String?   @default("America/Los_Angeles")
  
  // User role and permissions
  role          UserRole  @default(USER)
  isActive      Boolean   @default(true)
  
  // User preferences
  settings      Json      @default("{}")
  
  // Timestamps
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastLoginAt   DateTime?
  
  // NextAuth.js relations
  accounts      Account[]
  sessions      Session[]
  
  // Relations
  projects      ProjectMember[]
  syncHistory   SyncHistory[]
  pushSubscriptions PushSubscription[]
  emailPreferences EmailPreferences?
  emailLogs     EmailLog[]
  apiKeys       ApiKey[]
  
  @@map("users")
}

// NextAuth.js Account model
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// NextAuth.js Session model
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// NextAuth.js Verification Token model
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Server model for tracking remote Task Master instances
model Server {
  id          String   @id @default(cuid())
  name        String   // Human-readable name (e.g., "Production Server", "Development VM")
  description String?
  
  // Connection details
  host        String   // IP address or hostname
  port        Int      @default(22) // SSH port
  username    String   // SSH username
  privateKey  String?  // SSH private key (encrypted)
  password    String?  // SSH password (encrypted) - alternative to private key
  
  // Task Master path on remote server
  projectPath String   // Path to the project root with .taskmaster folder
  
  // Server status and metadata
  status      ServerStatus @default(ACTIVE)
  lastPingAt  DateTime?
  isReachable Boolean  @default(true)
  
  // Connection settings
  settings    Json     @default("{}")
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  projects    Project[]
  syncHistory SyncHistory[]
  
  // Indexes
  @@index([host])
  @@index([status])
  @@map("servers")
}

// Project model representing individual Task Master projects
model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  
  // Git integration
  gitUrl      String?
  gitBranch   String   @default("main")
  gitProvider String?  // 'github', 'gitlab', etc.
  
  // Task Master tag
  tag         String   // No longer unique globally - unique per server
  
  // Server relation
  serverId    String?  // Optional for local projects
  server      Server?  @relation(fields: [serverId], references: [id], onDelete: SetNull)
  
  // Project status and metadata
  status      ProjectStatus @default(ACTIVE)
  visibility  ProjectVisibility @default(PRIVATE)
  settings    Json      @default("{}")
  
  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  lastSyncAt  DateTime?
  
  // Relations
  tasks       Task[]
  members     ProjectMember[]
  syncHistory SyncHistory[]
  
  // Unique constraint for tag per server (allows same tag on different servers)
  @@unique([serverId, tag])
  @@index([tag])
  @@index([status])
  @@index([createdAt])
  @@index([serverId])
  @@map("projects")
}

// Task model representing individual tasks from Task Master
model Task {
  id          String   @id @default(cuid())
  
  // Task Master specific fields
  taskId      String   // Original task ID from Task Master (e.g., "1.2.3")
  title       String
  description String
  
  // Task metadata
  status      TaskStatus @default(PENDING)
  priority    TaskPriority @default(MEDIUM)
  complexity  Int?
  
  // Task data from Task Master (JSON stored)
  data        Json      // Complete task object from Task Master
  details     String?   // Implementation details
  testStrategy String?  // Testing strategy
  
  // Relations
  projectId   String
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  // Dependencies (self-referencing many-to-many)
  dependencies     Task[] @relation("TaskDependencies")
  dependentTasks   Task[] @relation("TaskDependencies")
  
  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Compound unique constraint
  @@unique([projectId, taskId])
  @@index([projectId])
  @@index([status])
  @@index([priority])
  @@index([taskId])
  @@map("tasks")
}

// Project membership and access control
model ProjectMember {
  id        String   @id @default(cuid())
  
  // Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  // Access control
  role      ProjectRole @default(MEMBER)
  permissions Json     @default("{}")
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([userId, projectId])
  @@map("project_members")
}

// Sync history for tracking synchronization from servers
model SyncHistory {
  id        String   @id @default(cuid())
  
  // Relations
  projectId String?
  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  serverId  String?
  server    Server?  @relation(fields: [serverId], references: [id], onDelete: Cascade)
  
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  // Sync metadata
  commitSha String?
  syncType  SyncType @default(MANUAL)
  status    SyncStatus @default(PENDING)
  
  // Sync results
  tasksAdded    Int @default(0)
  tasksUpdated  Int @default(0)
  tasksRemoved  Int @default(0)
  
  // Error information
  errorMessage  String?
  syncData      Json?    // Additional sync metadata
  
  // Timestamps
  startedAt     DateTime @default(now())
  completedAt   DateTime?
  
  @@index([projectId])
  @@index([serverId])
  @@index([status])
  @@index([startedAt])
  @@map("sync_history")
}

// Push notification subscriptions
model PushSubscription {
  id        String   @id @default(cuid())
  
  // User relation
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Push subscription data
  endpoint  String   @unique
  p256dh    String   // Public key for encryption
  auth      String   // Authentication secret
  
  // Device/browser information
  userAgent String?
  device    String?
  browser   String?
  
  // Subscription preferences
  enabled   Boolean  @default(true)
  types     Json     @default("[]") // Array of notification types to receive
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lastUsedAt DateTime?
  
  @@index([userId])
  @@index([enabled])
  @@map("push_subscriptions")
}

// Email preferences for users
model EmailPreferences {
  id        String   @id @default(cuid())
  
  // User relation
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Email notification types
  taskAssigned    Boolean @default(true)
  taskUpdated     Boolean @default(true)
  taskComment     Boolean @default(true)
  taskDue         Boolean @default(true)
  teamUpdates     Boolean @default(true)
  weeklyReport    Boolean @default(true)
  monthlyDigest   Boolean @default(false)
  
  // Email frequency
  emailDigest     EmailFrequency @default(DAILY)
  
  // Quiet hours
  quietHoursEnabled Boolean @default(false)
  quietHoursStart   String? // Time in HH:MM format
  quietHoursEnd     String? // Time in HH:MM format
  timezone          String @default("America/Los_Angeles")
  
  // Unsubscribe token
  unsubscribeToken String @unique @default(cuid())
  unsubscribedAt   DateTime?
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([userId])
  @@index([unsubscribeToken])
  @@map("email_preferences")
}

// Email delivery logs
model EmailLog {
  id        String   @id @default(cuid())
  
  // User relation
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Email details
  to        String
  from      String
  subject   String
  template  String // Template name used
  type      EmailType // Type of email notification
  
  // Delivery status
  status    EmailStatus @default(PENDING)
  provider  String? // Email provider used (e.g., "smtp", "sendgrid")
  messageId String? // Provider's message ID
  
  // Error tracking
  errorMessage String?
  attempts    Int @default(0)
  lastAttemptAt DateTime?
  
  // Email content
  htmlContent String? @db.Text
  textContent String? @db.Text
  metadata    Json? // Additional email metadata
  
  // Timestamps
  createdAt   DateTime @default(now())
  sentAt      DateTime?
  openedAt    DateTime?
  clickedAt   DateTime?
  bouncedAt   DateTime?
  
  @@index([userId])
  @@index([status])
  @@index([type])
  @@index([createdAt])
  @@map("email_logs")
}

// API Key model for secure API access
model ApiKey {
  id        String   @id @default(cuid())
  
  // User relation
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Key details
  name      String   // User-friendly name for the key
  key       String   @unique // Hashed version of the API key
  prefix    String   // First few characters for identification (e.g., "tm_live_")
  type      ApiKeyType @default(PERSONAL) // Personal vs Application key
  
  // Permissions and scopes
  scopes    Json     @default("[]") // Array of allowed scopes/permissions
  
  // Expiration and status
  expiresAt DateTime?
  revokedAt DateTime?
  lastUsedAt DateTime?
  isActive  Boolean  @default(true)
  
  // Rate limiting
  rateLimit Int?     // Requests per hour (null = unlimited)
  
  // Metadata
  description String?
  metadata  Json?    // Additional key metadata
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  usage     ApiKeyUsage[]
  
  @@index([userId])
  @@index([key])
  @@index([prefix])
  @@index([isActive])
  @@index([expiresAt])
  @@map("api_keys")
}

// API Key usage tracking
model ApiKeyUsage {
  id        String   @id @default(cuid())
  
  // API Key relation
  apiKeyId  String
  apiKey    ApiKey   @relation(fields: [apiKeyId], references: [id], onDelete: Cascade)
  
  // Request details
  endpoint  String   // API endpoint accessed
  method    String   // HTTP method (GET, POST, etc.)
  ipAddress String?  // IP address of the request
  userAgent String?  // User agent string
  
  // Response details
  statusCode Int     // HTTP status code
  responseTime Int   // Response time in milliseconds
  
  // Additional data
  metadata  Json?    // Additional request metadata
  
  // Timestamp
  timestamp DateTime @default(now())
  
  @@index([apiKeyId])
  @@index([timestamp])
  @@index([endpoint])
  @@map("api_key_usage")
}

// Enums
enum UserRole {
  SUPER_ADMIN
  ADMIN
  USER
  VIEWER
}

enum ProjectStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
  DELETED
}

enum ProjectVisibility {
  PUBLIC
  PRIVATE
  INTERNAL
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  DONE
  BLOCKED
  DEFERRED
  CANCELLED
  REVIEW
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ProjectRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

enum SyncType {
  MANUAL
  AUTOMATIC
  WEBHOOK
  SCHEDULED
}

enum SyncStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

enum ServerStatus {
  ACTIVE
  INACTIVE
  UNREACHABLE
  ERROR
  MAINTENANCE
}

enum EmailFrequency {
  INSTANT
  DAILY
  WEEKLY
  NEVER
}

enum EmailType {
  TASK_ASSIGNED
  TASK_UPDATED
  TASK_COMMENT
  TASK_DUE
  TEAM_UPDATE
  WEEKLY_REPORT
  MONTHLY_DIGEST
  SYSTEM
  VERIFICATION
  PASSWORD_RESET
}

enum EmailStatus {
  PENDING
  QUEUED
  SENDING
  SENT
  FAILED
  BOUNCED
  OPENED
  CLICKED
}

enum ApiKeyType {
  PERSONAL
  APPLICATION
  SERVICE
}
