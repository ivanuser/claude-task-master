{
  "openapi": "3.0.0",
  "info": {
    "title": "Task Master Dashboard API",
    "version": "1.0.0",
    "description": "REST API for Task Master Dashboard - Manage projects and tasks across your development workflow",
    "contact": {
      "name": "Task Master Support",
      "email": "support@taskmaster.ai"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "servers": [
    {
      "url": "http://localhost:3002/api",
      "description": "Development server"
    },
    {
      "url": "https://taskmanagerai.honercloud.com/api",
      "description": "Production server"
    }
  ],
  "tags": [
    {
      "name": "Projects",
      "description": "Project management operations"
    },
    {
      "name": "Tasks",
      "description": "Task management operations"
    },
    {
      "name": "WebSocket",
      "description": "Real-time synchronization events"
    }
  ],
  "paths": {
    "/projects": {
      "get": {
        "tags": ["Projects"],
        "summary": "List all projects",
        "description": "Retrieve a paginated list of projects with optional filtering and sorting",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            "description": "Page number for pagination"
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            },
            "description": "Number of items per page"
          },
          {
            "name": "search",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Search term for project name or description"
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["active", "paused", "archived", "completed"]
              }
            },
            "description": "Filter by project status"
          },
          {
            "name": "tags",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter by project tags"
          },
          {
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["name", "lastActivity", "taskCount", "completion"],
              "default": "lastActivity"
            },
            "description": "Field to sort by"
          },
          {
            "name": "sortOrder",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"],
              "default": "desc"
            },
            "description": "Sort order"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Projects"],
        "summary": "Create a new project",
        "description": "Create a new Task Master project",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProjectRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Project created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{id}": {
      "get": {
        "tags": ["Projects"],
        "summary": "Get a project by ID",
        "description": "Retrieve detailed information about a specific project",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          },
          "404": {
            "description": "Project not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Projects"],
        "summary": "Update a project",
        "description": "Update an existing project's information",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProjectRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Project updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Project not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Projects"],
        "summary": "Delete a project",
        "description": "Permanently delete a project and all associated data",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Project deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Project deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Project not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{id}/tasks": {
      "get": {
        "tags": ["Tasks"],
        "summary": "List tasks for a project",
        "description": "Retrieve a paginated list of tasks for a specific project with optional filtering and sorting",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            "description": "Page number for pagination"
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 50
            },
            "description": "Number of items per page"
          },
          {
            "name": "search",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Search term for task title or description"
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["pending", "in-progress", "review", "done", "blocked", "cancelled", "deferred"]
              }
            },
            "description": "Filter by task status"
          },
          {
            "name": "priority",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["low", "medium", "high", "critical"]
              }
            },
            "description": "Filter by task priority"
          },
          {
            "name": "assignedTo",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Filter by assigned user ID"
          },
          {
            "name": "hasSubtasks",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "description": "Filter tasks that have/don't have subtasks"
          },
          {
            "name": "parentTaskId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Filter subtasks by parent task ID"
          },
          {
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["id", "title", "priority", "status", "dueDate", "createdAt"],
              "default": "id"
            },
            "description": "Field to sort by"
          },
          {
            "name": "sortOrder",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"],
              "default": "asc"
            },
            "description": "Sort order"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Tasks"],
        "summary": "Create a new task",
        "description": "Create a new task within a project",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTaskRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Task created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Tasks"],
        "summary": "Bulk update tasks",
        "description": "Update multiple tasks at once with the same changes",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkUpdateTasksRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Tasks updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Updated 5 tasks"
                    },
                    "updatedTasks": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Task"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{id}/tasks/{taskId}": {
      "get": {
        "tags": ["Tasks"],
        "summary": "Get a task by ID",
        "description": "Retrieve detailed information about a specific task",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID"
          },
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Task ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "404": {
            "description": "Task not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Tasks"],
        "summary": "Update a task",
        "description": "Update an existing task's information",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID"
          },
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Task ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTaskRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Task updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Task not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Tasks"],
        "summary": "Delete a task",
        "description": "Permanently delete a task and all its subtasks",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID"
          },
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Task ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Task deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Task deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Task not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Project": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "1"
          },
          "name": {
            "type": "string",
            "example": "Task Master Dashboard"
          },
          "description": {
            "type": "string",
            "example": "Web dashboard for Task Master projects"
          },
          "status": {
            "type": "string",
            "enum": ["active", "paused", "archived", "completed"],
            "example": "active"
          },
          "gitProvider": {
            "type": "string",
            "enum": ["github", "gitlab", "bitbucket"],
            "example": "github"
          },
          "gitUrl": {
            "type": "string",
            "format": "uri",
            "example": "https://github.com/user/task-master-dashboard"
          },
          "gitBranch": {
            "type": "string",
            "example": "main"
          },
          "totalTasks": {
            "type": "integer",
            "example": 25
          },
          "completedTasks": {
            "type": "integer",
            "example": 16
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": ["dashboard", "web", "react"]
          },
          "memberCount": {
            "type": "integer",
            "example": 2
          },
          "lastActivity": {
            "type": "string",
            "format": "date-time"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "owner": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "email": {
                "type": "string",
                "format": "email"
              }
            }
          },
          "isTaskMasterProject": {
            "type": "boolean",
            "example": true
          },
          "hasCustomRules": {
            "type": "boolean",
            "example": true
          },
          "syncEnabled": {
            "type": "boolean",
            "example": true
          }
        },
        "required": ["id", "name", "status", "gitProvider"]
      },
      "Task": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "1"
          },
          "projectId": {
            "type": "string",
            "example": "1"
          },
          "title": {
            "type": "string",
            "example": "Setup authentication"
          },
          "description": {
            "type": "string",
            "example": "Implement JWT-based authentication system"
          },
          "status": {
            "type": "string",
            "enum": ["pending", "in-progress", "review", "done", "blocked", "cancelled", "deferred"],
            "example": "done"
          },
          "priority": {
            "type": "string",
            "enum": ["low", "medium", "high", "critical"],
            "example": "high"
          },
          "dependencies": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": []
          },
          "subtasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Subtask"
            }
          },
          "details": {
            "type": "string",
            "example": "Use bcrypt for password hashing and JWT for token generation"
          },
          "testStrategy": {
            "type": "string",
            "example": "Unit tests for auth functions, integration tests for auth flow"
          },
          "assignedTo": {
            "type": "string",
            "nullable": true
          },
          "dueDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "complexity": {
            "type": "integer",
            "minimum": 1,
            "maximum": 10,
            "example": 8
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": ["id", "projectId", "title", "status", "priority"]
      },
      "Subtask": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "1.1"
          },
          "title": {
            "type": "string",
            "example": "Create auth middleware"
          },
          "description": {
            "type": "string",
            "example": "Middleware for protecting routes"
          },
          "status": {
            "type": "string",
            "enum": ["pending", "in-progress", "review", "done", "blocked", "cancelled", "deferred"],
            "example": "done"
          },
          "priority": {
            "type": "string",
            "enum": ["low", "medium", "high", "critical"],
            "example": "high"
          },
          "dependencies": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": ["id", "title", "status", "priority"]
      },
      "CreateProjectRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "description": {
            "type": "string",
            "maxLength": 1000
          },
          "status": {
            "type": "string",
            "enum": ["active", "paused", "archived", "completed"],
            "default": "active"
          },
          "gitProvider": {
            "type": "string",
            "enum": ["github", "gitlab", "bitbucket"]
          },
          "gitUrl": {
            "type": "string",
            "format": "uri"
          },
          "gitBranch": {
            "type": "string",
            "default": "main"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "maxItems": 10
          },
          "syncEnabled": {
            "type": "boolean",
            "default": true
          }
        },
        "required": ["name", "gitProvider"]
      },
      "UpdateProjectRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "description": {
            "type": "string",
            "maxLength": 1000
          },
          "status": {
            "type": "string",
            "enum": ["active", "paused", "archived", "completed"]
          },
          "gitUrl": {
            "type": "string",
            "format": "uri"
          },
          "gitBranch": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "maxItems": 10
          },
          "syncEnabled": {
            "type": "boolean"
          }
        }
      },
      "CreateTaskRequest": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "description": {
            "type": "string",
            "maxLength": 2000
          },
          "status": {
            "type": "string",
            "enum": ["pending", "in-progress", "review", "done", "blocked", "cancelled", "deferred"],
            "default": "pending"
          },
          "priority": {
            "type": "string",
            "enum": ["low", "medium", "high", "critical"],
            "default": "medium"
          },
          "dependencies": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "details": {
            "type": "string"
          },
          "testStrategy": {
            "type": "string"
          },
          "assignedTo": {
            "type": "string"
          },
          "dueDate": {
            "type": "string",
            "format": "date-time"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "maxItems": 10
          },
          "complexity": {
            "type": "integer",
            "minimum": 1,
            "maximum": 10
          },
          "parentTaskId": {
            "type": "string"
          }
        },
        "required": ["title"]
      },
      "UpdateTaskRequest": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "description": {
            "type": "string",
            "maxLength": 2000
          },
          "status": {
            "type": "string",
            "enum": ["pending", "in-progress", "review", "done", "blocked", "cancelled", "deferred"]
          },
          "priority": {
            "type": "string",
            "enum": ["low", "medium", "high", "critical"]
          },
          "dependencies": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "details": {
            "type": "string"
          },
          "testStrategy": {
            "type": "string"
          },
          "assignedTo": {
            "type": "string"
          },
          "dueDate": {
            "type": "string",
            "format": "date-time"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "maxItems": 10
          },
          "complexity": {
            "type": "integer",
            "minimum": 1,
            "maximum": 10
          }
        }
      },
      "BulkUpdateTasksRequest": {
        "type": "object",
        "properties": {
          "taskIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 1
          },
          "updates": {
            "$ref": "#/components/schemas/UpdateTaskRequest"
          }
        },
        "required": ["taskIds", "updates"]
      },
      "ProjectListResponse": {
        "type": "object",
        "properties": {
          "projects": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Project"
            }
          },
          "total": {
            "type": "integer",
            "example": 3
          },
          "page": {
            "type": "integer",
            "example": 1
          },
          "limit": {
            "type": "integer",
            "example": 20
          },
          "hasMore": {
            "type": "boolean",
            "example": false
          }
        },
        "required": ["projects", "total", "page", "limit", "hasMore"]
      },
      "TaskListResponse": {
        "type": "object",
        "properties": {
          "tasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Task"
            }
          },
          "total": {
            "type": "integer",
            "example": 25
          },
          "page": {
            "type": "integer",
            "example": 1
          },
          "limit": {
            "type": "integer",
            "example": 50
          },
          "hasMore": {
            "type": "boolean",
            "example": false
          }
        },
        "required": ["tasks", "total", "page", "limit", "hasMore"]
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "example": "Invalid request parameters"
          },
          "details": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string"
                },
                "path": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "required": ["error"]
      },
      "WebSocketEvent": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": ["project:update", "task:update", "task:create", "task:delete", "sync:start", "sync:complete"],
            "example": "task:update"
          },
          "payload": {
            "type": "object",
            "description": "Event-specific payload data"
          },
          "projectId": {
            "type": "string",
            "example": "1"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": ["type", "payload", "timestamp"]
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "JWT token authentication"
      },
      "apiKey": {
        "type": "apiKey",
        "in": "header",
        "name": "X-API-Key",
        "description": "API key authentication"
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    },
    {
      "apiKey": []
    }
  ]
}